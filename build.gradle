apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: "jacoco"


sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    mavenCentral()
}


jacoco {
    toolVersion = "0.7.4+"
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}


dependencies {
    testCompile 'junit:junit:4.10'
      compile fileTree(dir: 'lib', include: '*.jar')
    findbugs 'com.google.code.findbugs:findbugs:3.0.1'
    findbugs configurations.findbugsPlugins.dependencies
    findbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.4.4'
}

checkstyle {
    ignoreFailures = true
    toolVersion = '6.6'
    configFile file("config/checkstyle/checkstyle.xml")
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

pmd {
    ignoreFailures = true
}

tasks.withType(Pmd) {
    reports {
        xml.enabled = true
        html.enabled = false
    }
}


/**task pmd (type: Pmd) {

ignoreFailures = false
description 'Run pmd'
group 'verification'
rulePriority = 2

ruleSets = ["java-android",
            "java-basic",
            "java-braces",
            "java-strings",
            "java-design",
            "java-unusedcode"]
source = fileTree('src/main/java')

reports {
    xml.enabled = true
    html.enabled = false
   }
}
// add CPD to check
check << {
  File outDir = new File('build/reports/pmd/')
  outDir.mkdirs()
  ant.taskdef(name: 'cpd', classname: 'net.sourceforge.pmd.cpd.CPDTask',
    classpath: configurations.pmd.asPath)
  ant.cpd(minimumTokenCount: '100', format: 'xml',
    outputFile: new File(outDir , 'cpd.xml')) {
    fileset(dir: "src/main/java") {**/
    //include(name: '**/*.java')
    //}
  //}
//}

//check.doLast {
//    project.tasks.getByName("pmd").execute()
//}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = true
        html.enabled = false
    }
}

task findSecurityBugs(type: FindBugs) {
    classes = fileTree(project.rootDir.absolutePath).include("**/*.class");
    source = fileTree(project.rootDir.absolutePath).include("**/*.java");
    classpath = files()
    pluginClasspath = project.configurations.findbugsPlugins
    findbugs {
        toolVersion = "3.0.1"
        //xml.enabled = true
        //html.enabled = false
        ignoreFailures = true
        effort = "max"
        reportLevel = "low"
    }
}



test {
    testLogging {
        events "failed"
        exceptionFormat "short"
    }
}

check.dependsOn jacocoTestReport
